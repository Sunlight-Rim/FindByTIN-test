// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: internal/tin/proto/tin.proto

package tin_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TinService_Get_FullMethodName = "/tin.TinService/Get"
)

// TinServiceClient is the client API for TinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinServiceClient interface {
	Get(ctx context.Context, in *GetTinRequest, opts ...grpc.CallOption) (*GetTinResponse, error)
}

type tinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTinServiceClient(cc grpc.ClientConnInterface) TinServiceClient {
	return &tinServiceClient{cc}
}

func (c *tinServiceClient) Get(ctx context.Context, in *GetTinRequest, opts ...grpc.CallOption) (*GetTinResponse, error) {
	out := new(GetTinResponse)
	err := c.cc.Invoke(ctx, TinService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinServiceServer is the server API for TinService service.
// All implementations must embed UnimplementedTinServiceServer
// for forward compatibility
type TinServiceServer interface {
	Get(context.Context, *GetTinRequest) (*GetTinResponse, error)
	mustEmbedUnimplementedTinServiceServer()
}

// UnimplementedTinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTinServiceServer struct {
}

func (UnimplementedTinServiceServer) Get(context.Context, *GetTinRequest) (*GetTinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTinServiceServer) mustEmbedUnimplementedTinServiceServer() {}

// UnsafeTinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinServiceServer will
// result in compilation errors.
type UnsafeTinServiceServer interface {
	mustEmbedUnimplementedTinServiceServer()
}

func RegisterTinServiceServer(s grpc.ServiceRegistrar, srv TinServiceServer) {
	s.RegisterService(&TinService_ServiceDesc, srv)
}

func _TinService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).Get(ctx, req.(*GetTinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinService_ServiceDesc is the grpc.ServiceDesc for TinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tin.TinService",
	HandlerType: (*TinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TinService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/tin/proto/tin.proto",
}
